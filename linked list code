#include <stdio.h>
#include <stdlib.h>

// Structure for a node in the linked list
struct Node {
    int rollNumber;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int rollNumber) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        exit(1);
    }
    newNode->rollNumber = rollNumber;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the linked list
void insertAtEnd(struct Node** head, int rollNumber) {
    struct Node* newNode = createNode(rollNumber);
    
    // If the list is empty, make the new node the head
    if (*head == NULL) {
        *head = newNode;
        return;
    }
    
    // Traverse to the end of the list
    struct Node* temp = *head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    
    // Link the new node at the end
    temp->next = newNode;
}

// Function to display the linked list in the required format
void displayList(struct Node* head) {
    if (head == NULL) {
        printf("Roll Numbers in Linked List: Empty list\n");
        return;
    }
    
    printf("Roll Numbers in Linked List: ");
    struct Node* temp = head;
    
    while (temp != NULL) {
        printf("%d", temp->rollNumber);
        if (temp->next != NULL) {
            printf(" â†’ ");
        }
        temp = temp->next;
    }
    printf("\n");
}

// Function to free all nodes in the linked list
void freeList(struct Node* head) {
    struct Node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* head = NULL;
    int rollNumber;
    int numMembers;
    
    printf("=== Singly Linked List Program ===\n\n");
    
    // Insert your roll number as the first node
    printf("Enter your roll number: ");
    scanf("%d", &rollNumber);
    insertAtEnd(&head, rollNumber);
    printf("Your roll number %d has been added as the first node.\n\n", rollNumber);
    
    // Get number of team members
    printf("Enter the number of team members: ");
    scanf("%d", &numMembers);
    
    // Insert team members' roll numbers
    if (numMembers > 0) {
        printf("\nEnter roll numbers of your team members:\n");
        for (int i = 0; i < numMembers; i++) {
            printf("Team member %d roll number: ", i + 1);
            scanf("%d", &rollNumber);
            insertAtEnd(&head, rollNumber);
        }
    }
    
    printf("\n=== Final Linked List ===\n");
    displayList(head);
    
    // Free allocated memory
    freeList(head);
    
    return 0;
}
